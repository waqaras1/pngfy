// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  subscription  Subscription?
  credits       Credit[]
  images        Image[]
  apiKeys       ApiKey[]

  @@map("users")
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String    @unique
  stripeCustomerId  String?   @unique
  stripeSubscriptionId String? @unique
  status            SubscriptionStatus @default(ACTIVE)
  plan              SubscriptionPlan @default(FREE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Credit {
  id          String    @id @default(cuid())
  userId      String
  amount      Int
  type        CreditType
  description String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model Image {
  id              String    @id @default(cuid())
  userId          String
  originalUrl     String
  processedUrl    String?
  status          ImageStatus @default(PROCESSING)
  creditsUsed     Int       @default(1)
  processingTime  Int?      // in milliseconds
  errorMessage    String?
  metadata        Json?     // Store additional metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("images")
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  name        String
  key         String    @unique
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum CreditType {
  PURCHASED
  BONUS
  REFUND
  SUBSCRIPTION
}

enum ImageStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}